# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import pynq_service_pb2 as pynq__service__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in pynq_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PYNQServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Authenticate = channel.unary_unary(
                '/pynq.PYNQService/Authenticate',
                request_serializer=pynq__service__pb2.AuthRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.AuthResponse.FromString,
                _registered_method=True)
        self.LoadOverlay = channel.unary_unary(
                '/pynq.PYNQService/LoadOverlay',
                request_serializer=pynq__service__pb2.LoadOverlayRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.LoadOverlayResponse.FromString,
                _registered_method=True)
        self.GetOverlayInfo = channel.unary_unary(
                '/pynq.PYNQService/GetOverlayInfo',
                request_serializer=pynq__service__pb2.GetOverlayInfoRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.OverlayInfoResponse.FromString,
                _registered_method=True)
        self.UnloadOverlay = channel.unary_unary(
                '/pynq.PYNQService/UnloadOverlay',
                request_serializer=pynq__service__pb2.UnloadOverlayRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.Empty.FromString,
                _registered_method=True)
        self.CreateMMIO = channel.unary_unary(
                '/pynq.PYNQService/CreateMMIO',
                request_serializer=pynq__service__pb2.CreateMMIORequest.SerializeToString,
                response_deserializer=pynq__service__pb2.CreateMMIOResponse.FromString,
                _registered_method=True)
        self.MMIORead = channel.unary_unary(
                '/pynq.PYNQService/MMIORead',
                request_serializer=pynq__service__pb2.MMIOReadRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.MMIOReadResponse.FromString,
                _registered_method=True)
        self.MMIOWrite = channel.unary_unary(
                '/pynq.PYNQService/MMIOWrite',
                request_serializer=pynq__service__pb2.MMIOWriteRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.Empty.FromString,
                _registered_method=True)
        self.ReleaseMMIO = channel.unary_unary(
                '/pynq.PYNQService/ReleaseMMIO',
                request_serializer=pynq__service__pb2.ReleaseMMIORequest.SerializeToString,
                response_deserializer=pynq__service__pb2.Empty.FromString,
                _registered_method=True)
        self.AllocateBuffer = channel.unary_unary(
                '/pynq.PYNQService/AllocateBuffer',
                request_serializer=pynq__service__pb2.AllocateBufferRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.AllocateBufferResponse.FromString,
                _registered_method=True)
        self.ReadBuffer = channel.unary_unary(
                '/pynq.PYNQService/ReadBuffer',
                request_serializer=pynq__service__pb2.ReadBufferRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.ReadBufferResponse.FromString,
                _registered_method=True)
        self.WriteBuffer = channel.unary_unary(
                '/pynq.PYNQService/WriteBuffer',
                request_serializer=pynq__service__pb2.WriteBufferRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.Empty.FromString,
                _registered_method=True)
        self.FreeBuffer = channel.unary_unary(
                '/pynq.PYNQService/FreeBuffer',
                request_serializer=pynq__service__pb2.FreeBufferRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.Empty.FromString,
                _registered_method=True)
        self.CreateDMA = channel.unary_unary(
                '/pynq.PYNQService/CreateDMA',
                request_serializer=pynq__service__pb2.CreateDMARequest.SerializeToString,
                response_deserializer=pynq__service__pb2.CreateDMAResponse.FromString,
                _registered_method=True)
        self.DMATransfer = channel.unary_unary(
                '/pynq.PYNQService/DMATransfer',
                request_serializer=pynq__service__pb2.DMATransferRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.DMATransferResponse.FromString,
                _registered_method=True)
        self.GetDMAStatus = channel.unary_unary(
                '/pynq.PYNQService/GetDMAStatus',
                request_serializer=pynq__service__pb2.GetDMAStatusRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.GetDMAStatusResponse.FromString,
                _registered_method=True)


class PYNQServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Authenticate(self, request, context):
        """Session management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadOverlay(self, request, context):
        """Overlay operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOverlayInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnloadOverlay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateMMIO(self, request, context):
        """MMIO operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MMIORead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MMIOWrite(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseMMIO(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllocateBuffer(self, request, context):
        """Buffer operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadBuffer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteBuffer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FreeBuffer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDMA(self, request, context):
        """DMA operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DMATransfer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDMAStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PYNQServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.Authenticate,
                    request_deserializer=pynq__service__pb2.AuthRequest.FromString,
                    response_serializer=pynq__service__pb2.AuthResponse.SerializeToString,
            ),
            'LoadOverlay': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadOverlay,
                    request_deserializer=pynq__service__pb2.LoadOverlayRequest.FromString,
                    response_serializer=pynq__service__pb2.LoadOverlayResponse.SerializeToString,
            ),
            'GetOverlayInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOverlayInfo,
                    request_deserializer=pynq__service__pb2.GetOverlayInfoRequest.FromString,
                    response_serializer=pynq__service__pb2.OverlayInfoResponse.SerializeToString,
            ),
            'UnloadOverlay': grpc.unary_unary_rpc_method_handler(
                    servicer.UnloadOverlay,
                    request_deserializer=pynq__service__pb2.UnloadOverlayRequest.FromString,
                    response_serializer=pynq__service__pb2.Empty.SerializeToString,
            ),
            'CreateMMIO': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMMIO,
                    request_deserializer=pynq__service__pb2.CreateMMIORequest.FromString,
                    response_serializer=pynq__service__pb2.CreateMMIOResponse.SerializeToString,
            ),
            'MMIORead': grpc.unary_unary_rpc_method_handler(
                    servicer.MMIORead,
                    request_deserializer=pynq__service__pb2.MMIOReadRequest.FromString,
                    response_serializer=pynq__service__pb2.MMIOReadResponse.SerializeToString,
            ),
            'MMIOWrite': grpc.unary_unary_rpc_method_handler(
                    servicer.MMIOWrite,
                    request_deserializer=pynq__service__pb2.MMIOWriteRequest.FromString,
                    response_serializer=pynq__service__pb2.Empty.SerializeToString,
            ),
            'ReleaseMMIO': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseMMIO,
                    request_deserializer=pynq__service__pb2.ReleaseMMIORequest.FromString,
                    response_serializer=pynq__service__pb2.Empty.SerializeToString,
            ),
            'AllocateBuffer': grpc.unary_unary_rpc_method_handler(
                    servicer.AllocateBuffer,
                    request_deserializer=pynq__service__pb2.AllocateBufferRequest.FromString,
                    response_serializer=pynq__service__pb2.AllocateBufferResponse.SerializeToString,
            ),
            'ReadBuffer': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadBuffer,
                    request_deserializer=pynq__service__pb2.ReadBufferRequest.FromString,
                    response_serializer=pynq__service__pb2.ReadBufferResponse.SerializeToString,
            ),
            'WriteBuffer': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteBuffer,
                    request_deserializer=pynq__service__pb2.WriteBufferRequest.FromString,
                    response_serializer=pynq__service__pb2.Empty.SerializeToString,
            ),
            'FreeBuffer': grpc.unary_unary_rpc_method_handler(
                    servicer.FreeBuffer,
                    request_deserializer=pynq__service__pb2.FreeBufferRequest.FromString,
                    response_serializer=pynq__service__pb2.Empty.SerializeToString,
            ),
            'CreateDMA': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDMA,
                    request_deserializer=pynq__service__pb2.CreateDMARequest.FromString,
                    response_serializer=pynq__service__pb2.CreateDMAResponse.SerializeToString,
            ),
            'DMATransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.DMATransfer,
                    request_deserializer=pynq__service__pb2.DMATransferRequest.FromString,
                    response_serializer=pynq__service__pb2.DMATransferResponse.SerializeToString,
            ),
            'GetDMAStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDMAStatus,
                    request_deserializer=pynq__service__pb2.GetDMAStatusRequest.FromString,
                    response_serializer=pynq__service__pb2.GetDMAStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pynq.PYNQService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('pynq.PYNQService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PYNQService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQService/Authenticate',
            pynq__service__pb2.AuthRequest.SerializeToString,
            pynq__service__pb2.AuthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadOverlay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQService/LoadOverlay',
            pynq__service__pb2.LoadOverlayRequest.SerializeToString,
            pynq__service__pb2.LoadOverlayResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOverlayInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQService/GetOverlayInfo',
            pynq__service__pb2.GetOverlayInfoRequest.SerializeToString,
            pynq__service__pb2.OverlayInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnloadOverlay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQService/UnloadOverlay',
            pynq__service__pb2.UnloadOverlayRequest.SerializeToString,
            pynq__service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateMMIO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQService/CreateMMIO',
            pynq__service__pb2.CreateMMIORequest.SerializeToString,
            pynq__service__pb2.CreateMMIOResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MMIORead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQService/MMIORead',
            pynq__service__pb2.MMIOReadRequest.SerializeToString,
            pynq__service__pb2.MMIOReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MMIOWrite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQService/MMIOWrite',
            pynq__service__pb2.MMIOWriteRequest.SerializeToString,
            pynq__service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReleaseMMIO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQService/ReleaseMMIO',
            pynq__service__pb2.ReleaseMMIORequest.SerializeToString,
            pynq__service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AllocateBuffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQService/AllocateBuffer',
            pynq__service__pb2.AllocateBufferRequest.SerializeToString,
            pynq__service__pb2.AllocateBufferResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadBuffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQService/ReadBuffer',
            pynq__service__pb2.ReadBufferRequest.SerializeToString,
            pynq__service__pb2.ReadBufferResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteBuffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQService/WriteBuffer',
            pynq__service__pb2.WriteBufferRequest.SerializeToString,
            pynq__service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FreeBuffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQService/FreeBuffer',
            pynq__service__pb2.FreeBufferRequest.SerializeToString,
            pynq__service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateDMA(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQService/CreateDMA',
            pynq__service__pb2.CreateDMARequest.SerializeToString,
            pynq__service__pb2.CreateDMAResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DMATransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQService/DMATransfer',
            pynq__service__pb2.DMATransferRequest.SerializeToString,
            pynq__service__pb2.DMATransferResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDMAStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQService/GetDMAStatus',
            pynq__service__pb2.GetDMAStatusRequest.SerializeToString,
            pynq__service__pb2.GetDMAStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class PYNQManagementServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTenant = channel.unary_unary(
                '/pynq.PYNQManagementService/CreateTenant',
                request_serializer=pynq__service__pb2.CreateTenantRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.CreateTenantResponse.FromString,
                _registered_method=True)
        self.UpdateTenant = channel.unary_unary(
                '/pynq.PYNQManagementService/UpdateTenant',
                request_serializer=pynq__service__pb2.UpdateTenantRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.UpdateTenantResponse.FromString,
                _registered_method=True)
        self.DeleteTenant = channel.unary_unary(
                '/pynq.PYNQManagementService/DeleteTenant',
                request_serializer=pynq__service__pb2.DeleteTenantRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.DeleteTenantResponse.FromString,
                _registered_method=True)
        self.ListTenants = channel.unary_unary(
                '/pynq.PYNQManagementService/ListTenants',
                request_serializer=pynq__service__pb2.ListTenantsRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.ListTenantsResponse.FromString,
                _registered_method=True)
        self.AddAllowedBitstream = channel.unary_unary(
                '/pynq.PYNQManagementService/AddAllowedBitstream',
                request_serializer=pynq__service__pb2.AddBitstreamRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.Empty.FromString,
                _registered_method=True)
        self.RemoveAllowedBitstream = channel.unary_unary(
                '/pynq.PYNQManagementService/RemoveAllowedBitstream',
                request_serializer=pynq__service__pb2.RemoveBitstreamRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.Empty.FromString,
                _registered_method=True)
        self.UpdateTenantLimits = channel.unary_unary(
                '/pynq.PYNQManagementService/UpdateTenantLimits',
                request_serializer=pynq__service__pb2.UpdateLimitsRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.Empty.FromString,
                _registered_method=True)
        self.GetTenantStatus = channel.unary_unary(
                '/pynq.PYNQManagementService/GetTenantStatus',
                request_serializer=pynq__service__pb2.GetTenantStatusRequest.SerializeToString,
                response_deserializer=pynq__service__pb2.GetTenantStatusResponse.FromString,
                _registered_method=True)
        self.GetSystemStatus = channel.unary_unary(
                '/pynq.PYNQManagementService/GetSystemStatus',
                request_serializer=pynq__service__pb2.Empty.SerializeToString,
                response_deserializer=pynq__service__pb2.SystemStatusResponse.FromString,
                _registered_method=True)


class PYNQManagementServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateTenant(self, request, context):
        """Tenant management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTenant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTenant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTenants(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddAllowedBitstream(self, request, context):
        """Configuration management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveAllowedBitstream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTenantLimits(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTenantStatus(self, request, context):
        """Runtime monitoring
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSystemStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PYNQManagementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTenant,
                    request_deserializer=pynq__service__pb2.CreateTenantRequest.FromString,
                    response_serializer=pynq__service__pb2.CreateTenantResponse.SerializeToString,
            ),
            'UpdateTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTenant,
                    request_deserializer=pynq__service__pb2.UpdateTenantRequest.FromString,
                    response_serializer=pynq__service__pb2.UpdateTenantResponse.SerializeToString,
            ),
            'DeleteTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTenant,
                    request_deserializer=pynq__service__pb2.DeleteTenantRequest.FromString,
                    response_serializer=pynq__service__pb2.DeleteTenantResponse.SerializeToString,
            ),
            'ListTenants': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTenants,
                    request_deserializer=pynq__service__pb2.ListTenantsRequest.FromString,
                    response_serializer=pynq__service__pb2.ListTenantsResponse.SerializeToString,
            ),
            'AddAllowedBitstream': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAllowedBitstream,
                    request_deserializer=pynq__service__pb2.AddBitstreamRequest.FromString,
                    response_serializer=pynq__service__pb2.Empty.SerializeToString,
            ),
            'RemoveAllowedBitstream': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveAllowedBitstream,
                    request_deserializer=pynq__service__pb2.RemoveBitstreamRequest.FromString,
                    response_serializer=pynq__service__pb2.Empty.SerializeToString,
            ),
            'UpdateTenantLimits': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTenantLimits,
                    request_deserializer=pynq__service__pb2.UpdateLimitsRequest.FromString,
                    response_serializer=pynq__service__pb2.Empty.SerializeToString,
            ),
            'GetTenantStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTenantStatus,
                    request_deserializer=pynq__service__pb2.GetTenantStatusRequest.FromString,
                    response_serializer=pynq__service__pb2.GetTenantStatusResponse.SerializeToString,
            ),
            'GetSystemStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSystemStatus,
                    request_deserializer=pynq__service__pb2.Empty.FromString,
                    response_serializer=pynq__service__pb2.SystemStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pynq.PYNQManagementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('pynq.PYNQManagementService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PYNQManagementService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQManagementService/CreateTenant',
            pynq__service__pb2.CreateTenantRequest.SerializeToString,
            pynq__service__pb2.CreateTenantResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQManagementService/UpdateTenant',
            pynq__service__pb2.UpdateTenantRequest.SerializeToString,
            pynq__service__pb2.UpdateTenantResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQManagementService/DeleteTenant',
            pynq__service__pb2.DeleteTenantRequest.SerializeToString,
            pynq__service__pb2.DeleteTenantResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTenants(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQManagementService/ListTenants',
            pynq__service__pb2.ListTenantsRequest.SerializeToString,
            pynq__service__pb2.ListTenantsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddAllowedBitstream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQManagementService/AddAllowedBitstream',
            pynq__service__pb2.AddBitstreamRequest.SerializeToString,
            pynq__service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveAllowedBitstream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQManagementService/RemoveAllowedBitstream',
            pynq__service__pb2.RemoveBitstreamRequest.SerializeToString,
            pynq__service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateTenantLimits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQManagementService/UpdateTenantLimits',
            pynq__service__pb2.UpdateLimitsRequest.SerializeToString,
            pynq__service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTenantStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQManagementService/GetTenantStatus',
            pynq__service__pb2.GetTenantStatusRequest.SerializeToString,
            pynq__service__pb2.GetTenantStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSystemStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pynq.PYNQManagementService/GetSystemStatus',
            pynq__service__pb2.Empty.SerializeToString,
            pynq__service__pb2.SystemStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
